#include <cstdio>
#include <cstring>
#include <cstdlib>
const int stSize = 6; // const int is pretty much the C++ equivalent of #DEFINE
const int width = 7; 
//REMINDER: MAKE SURE YOU CITE YOUR SOURCES IF YOU GOT ANY IDEAS FROM EXTERNAL RESOURCES 
// ^^ That was a reminder I wrote for myself since my professor did tell me to cite my sources for them
class myStack // class for myStack. Each column is a stack. 
{
 private:      // Quick summary: I treated each column as a stack (so the pieces would directly go down)
     int boardArr[width][stSize]; // and I used a 2D array implementation at the same time
     int inUseA; // inUse variables A through G refer to each stack/column in the gameBoard below
     int inUseB;
     int inUseC;
     int inUseD;
     int inUseE;
     int inUseF;
     int inUseG;
     int moveNumber; // so we can tell whose turn it is
     int slotsLeft; // essential for checking if there's a draw
     //char player; 
 public:
 myStack ()
 {
     for(int p = 0; p<width;p++) {
         for(int c = 0; c<stSize;c++){
         boardArr[p][c] = 'O';        // initializing the board with O's representing that the slots are empty
         }
     }
     inUseA = -1;
     inUseB = -1;
     inUseC = -1;
     inUseD = -1;
     inUseE = -1;
     inUseF = -1;
     inUseG = -1;
     moveNumber = 0;
     slotsLeft = 42;
 }

 int getstSize() {
     return stSize;
 }

 int getMoveNumber() {
     return moveNumber;
 }

 int getSlotsLeft() {
     return slotsLeft; // I made a few getter functions just in case I decided to make another class to access variables from. 
 }                     // Turns out I didn't really need such functions, but oh well.. lol

void showBoard() {
    printf("  =============================\n");
    printf("1:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][5],boardArr[1][5],boardArr[2][5],boardArr[3][5], boardArr[4][5],boardArr[5][5],boardArr[6][5]);
    printf("2:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][4],boardArr[1][4],boardArr[2][4],boardArr[3][4], boardArr[4][4],boardArr[5][4],boardArr[6][4]);
    printf("3:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][3],boardArr[1][3],boardArr[2][3],boardArr[3][3], boardArr[4][3],boardArr[5][3],boardArr[6][3]);
    printf("4:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][2],boardArr[1][2],boardArr[2][2],boardArr[3][2], boardArr[4][2],boardArr[5][2],boardArr[6][2]);
    printf("5:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][1],boardArr[1][1],boardArr[2][1],boardArr[3][1], boardArr[4][1],boardArr[5][1],boardArr[6][1]);
    printf("6:| %c | %c | %c | %c | %c | %c | %c |\n",boardArr[0][0],boardArr[1][0],boardArr[2][0],boardArr[3][0], boardArr[4][0],boardArr[5][0],boardArr[6][0]);
    printf("  =============================\n"); // FORMAT: ([WIDTH][HEIGHT])
    printf("    A   B   C   D   E   F   G   \n");
    }

void pushA() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
 if (inUseA == stSize-1) {
     printf("Error. Stack's full.\n");
     return;
 }
 else {
     inUseA = inUseA +1;
     boardArr[0][inUseA] = data;
     slotsLeft--;
     moveNumber++;
 }
 
}
void pushB() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseB == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseB = inUseB +1;
        boardArr[1][inUseB] = data;
        slotsLeft--;
        moveNumber++;
    }
   }
void pushC() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseC == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseC = inUseC +1;
        boardArr[2][inUseC] = data;
        slotsLeft--;
        moveNumber++;
    }
}
void pushD() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseD == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseD = inUseD +1;
        boardArr[3][inUseD] = data;
        slotsLeft--;
        moveNumber++;
    }
}

void pushE() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseE == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseE = inUseE +1;
        boardArr[4][inUseE] = data;
        slotsLeft--;
        moveNumber++;
    }
}

void pushF() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseF == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseF = inUseF +1;
        boardArr[5][inUseF] = data;
        slotsLeft--;
        moveNumber++;
    }
}

void pushG() {
    char data;
    if (moveNumber % 2 != 0) {
        data = '@';
    }
    else {
        data = '#';
    }
    if (inUseG == stSize-1) {
        printf("Error. Stack's full.\n");
        return;
    }
    else {
        inUseG = inUseG +1;
        boardArr[6][inUseG] = data;
        slotsLeft--;
        moveNumber++;
    }
}

int HorizontalWin() {  //https://stackoverflow.com/questions/35169200/checking-winner-in-connect-4-c-algorithm
// checks if there are four pieces connected in a row in both directions (left and right); the for-loop is repeated for each row.
    for(int y = 0; y<stSize;y++) {
        for(int x = 0; x<width;x++) {
            if((boardArr[x][y] == '@' && boardArr[x+1][y] == '@' && boardArr[x+2][y] == '@' && boardArr[x+3][y] == '@') ||
            (boardArr[x][y] == '@' && boardArr[x-1][y] == '@' && boardArr[x-2][y] == '@' && boardArr[x-3][y] == '@')) {
                printf("Winner horiz!\n");
                return 1;
            }
            else if ((boardArr[x][y] == '#' && boardArr[x+1][y] == '#' && boardArr[x+2][y] == '#' && boardArr[x+3][y] == '#') ||
            (boardArr[x][y] == '#' && boardArr[x-1][y] == '#' && boardArr[x-2][y] == '#' && boardArr[x-3][y] == '#')) {
                printf("Winner horiz!\n");
                return 1; 
            }
        }
    }
    return 0;
}


int VerticalWin () { // I could have written this the same way as my horizontal method, but I had come up with this method
    int vertCounter1 = 0; // way before my horizontal one, and since this is vertical, this is alright.
    int vertCounter2 = 0;

    for(int x = 0; x<width;x++) {
        vertCounter1 = 0;
        vertCounter2 = 0;
        for(int y = 0; y<stSize;y++) {
            if(boardArr[x][y] == '@') {
                vertCounter1++;
		vertCounter2 = 0; // for example, if a blue piece is on top of a red piece, the counter for red would be reset since you need four
            }        // connected pieces to win
            else if(boardArr[x][y] == '#') {
                vertCounter2++;
		vertCounter1 = 0;
            }
        }
        if(vertCounter1 == 4 || vertCounter2 == 4) {
            printf("Winner vert!\n");
            return 1;
        }
    }
    return 0;
}
/* if ((boardArr[width][stSize] == '@' && boardArr[width+1][stSize+1] == '@' && boardArr[width+2][stSize+2] == '@' && boardArr[width+3][stSize+3] == '@') ||
        (boardArr[width][stSize] == '@' && boardArr[width-1][stSize-1] == '@' && boardArr[width-2][stSize-2] == '@' && boardArr[width-3][stSize-3] == '@')) {
        printf("Winner diag!"); // I chose to comment this out because width was a read-only variable AND the core logic was good
        return 1;              // so I kept it as a reference.
*/
int diagonalWin() { // ascending diagonal wins.. Here I actually had to draw stuff on graph paper.
    for (int p = 0; p<stSize;p++) {
        for(int k = 0; k<width;k++) {
            if (boardArr[k][p] == '@' && boardArr[k+1][p+1] == '@' && boardArr[k+2][p+2] == '@' && boardArr[k+3][p+3] == '@') {
                printf("Diagonal win!\n");
                return 1;
        }
            else if (boardArr[k][p] == '#' && boardArr[k+1][p+1] == '#' && boardArr[k+2][p+2] == '#' && boardArr[k+3][p+3] == '#') {
                printf("Diagonal win!\n");
                return 1;
            }
        }
    }
    return 0;
}

int otherDiagonalWin() { // checks for diagonal wins in a descending manner
    for (int p = stSize; p>0;p--) {
        for(int k = 0; k<width;k++) {
            if (boardArr[k][p] == '@' && boardArr[k+1][p-1] == '@' && boardArr[k+2][p-2] == '@' && boardArr[k+3][p-3] == '@') {
                printf("Other Diagonal win!\n");
                return 1;
        }
            else if (boardArr[k][p] == '#' && boardArr[k+1][p-1] == '#' && boardArr[k+2][p-2] == '#' && boardArr[k+3][p-3] == '#') {
                printf("Other Diagonal win!\n");
                return 1;
            }
        }
    }
    return 0;
}

int checkForDraw() {
    if ((VerticalWin() == 0 && HorizontalWin() == 0 && diagonalWin() == 0 && otherDiagonalWin() == 0) && slotsLeft == 0) {
        printf("No wins and no slots remaining. Game drawn.\n");
        return 1;
    }
    return 0;
}

void processCommandLoop (FILE* inFile) // credits to Prof. Troy of UIC for this method. I borrowed parts of it and then tweaked the method to fit my program's needs
{
 char  buffer[300]; //  
 char* input;

 input = fgets ( buffer, 300, inFile );   // get a line of input
   
 // loop until all lines are read from the input
 while (input != NULL)
 {
   // process each line of input using the strtok functions 
   char* command;
   command = strtok (input , " \n\t");

   printf ("*%s*\n", command);
   
   if ( command == NULL ) {
     printf ("Blank Line\n"); 
   }

   else if ( strcmp (command, "q") == 0){ 
     exit(1); 
   }
    
   else if ( strcmp (command, "?") == 0){ 
     showCommands();
   }
    
   else if ( strcmp (command, "a") == 0){ 
     pushA();
     showBoard();
     if (VerticalWin() == 1 || HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "b") == 0){ 
     pushB();
     showBoard();
     if (VerticalWin() == 1 || HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "c") == 0){ 
     pushC();
     showBoard();
     if (VerticalWin() == 1|| HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "d") == 0){ 
     pushD();
     showBoard();
     if (VerticalWin() == 1|| HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "e") == 0){ 
     pushE();
     showBoard();
     if (VerticalWin() == 1|| HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "f") == 0){ 
     pushF();
     showBoard();
     if (VerticalWin() == 1|| HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else if ( strcmp (command, "g") == 0){ 
     pushG();
     showBoard();
     if (VerticalWin() == 1|| HorizontalWin() == 1 || diagonalWin() == 1 || otherDiagonalWin() == 1 || checkForDraw() == 1) {
         break;
     }
   }
   else {
     printf ("Invalid input: %s\n", command);
   }
   input = fgets ( buffer, 300, inFile );   // get the next line of input

 }
}


void showCommands() // shows you all the possible commands
{
  printf ("The commands for this game:\n");
  printf("At any point, you may quit the game by entering 'q'");
  printf ("  q \n");
  printf ("  ? \n");
  printf ("  a \n");
  printf ("  b  \n");
  printf ("  c \n");
  printf ("  d \n");
  printf ("  e \n");
  printf ("  f \n");
  printf ("  g \n");
  printf("Options a-g mean that you can push a piece into the indicated stack\n");
}

};


 int main() // I tried to keep the main method as concise as possible as per conventional programming standards
 {
   FILE* inFile = stdin;

   myStack test;
   test.showCommands();
   test.showBoard();
   test.processCommandLoop(inFile);
   printf("Quitting..\n");
   return 1;
 }
